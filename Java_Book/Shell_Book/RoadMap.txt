Mastering Linux Shell & CLI
────────────────────────────
Level 1: CLI Basics
────────────────────────────
├─ 1.Navigation
│   ├─ pwd       # Show current directory  
|   |                eg: admin@host:~/Java_world$ pwd → /home/admin/Java_world
│   ├─ ls        # List files/folders
|   |                eg:admin123@admin123-Inspiron-15-3520:~/Java_world$ ls   Java_Book
|   |
│   ├─ cd        # Change directory
|   |                eg: cd Concepts/01_Basics
│   └─ tree      # Show folder structure
│                    eg:admin123@admin123-Inspiron-15-3520:~/Java_world/Java_Book$ tree
.
                                                       ├── Concepts
                                                       │   ├── 01_Basics
                                                       │   │   ├── 01_History_Features
                                                       │   │   │   ├── History_Features.odt
                                                       │   │   │   └── History_Features.txt
                                                       │   │   └── 02_Environment_WorkingDetails
                                                       │   │       └── JDK_JRE_JVM.odt
                                                       │   |
                                                       │   ├── ExceptionHandling
                                                       │   ├── Generics
                                                       │   ├── ImmutableString
                                                       │   │   ├── StringBuffer
                                                       │   │   └── StringBuilder
                                                       │   ├── InnerClasses
                                                       │   ├── IOStreams
                                                       │   ├── MultiThreading
                                                       │   ├── newIOStreams                 
                                                       │   ├── StreamApi
                                                       │   └── Strig
                                                       └── Shell_Book
                                                           └── RoadMap.txt
                                                           
                                                Navigation
Command	 Full Name	           Functionality	                               Example
-------  -------                     ----------                                        -------
pwd	Print Working Directory	  Shows the full path of the current directory	       admin@host:~/Java_world$ pwd → /home/admin/Java_world
ls	List	                  Lists files and directories in current folder	       ls   Java_Book
cd	Change Directory	  Move between directories	                       cd Concepts/01_Basics
tree	Tree	                  Displays folder structure in hierarchical view       ......


27 directories, 6 files

├─ 2. File & Folder Management
│   ├─ mkdir     # Create folder
│   ├─ touch     # Create file
│   ├─ cp/mv     # Copy/Move files
│   └─ rm/rm -r  # Delete files/folders
│



2. File & Folder Management
Command	       Full Name	   Functionality                                            Example
-------         --------           -------------                                           ----------
mkdir	        Make Directory	    Create new folders                                     mkdir Projects → creates a folder named Projects
touch	        Touch	            Create new empty files                                 touch notes.txt → creates an empty file called notes.txt
cp / mv	        Copy / Move	    Copy or move files/folders                             cp file.txt backup/ → copies file.txt to the backup folder
                                                                                           mv file.txt archive/ → moves file.txt to the archive folder
rm / rm -r 	Remove	            Delete files (rm) or directories recursively (rm -r)   rm oldfile.txt → deletes the file oldfile.txt
/rm  -rf                                                                                   rm -r OldProjects/ → deletes folder OldProjects and all its contents,no error message is shown. 
                                                                                                                                
                                                                                           And   Suppresses warnings
                                                                                          Note: Always be careful with -f, especially combined with -r (rm -rf), 
                                                                                          because deleted files cannot   be recovered.

├─ Viewing Files
│   ├─ cat       # Show content
│   ├─ less      # Paginated view
│   ├─ head      # First 10 lines
│   └─ tail      # Last 10 lines
────────────────────────────
Level 2: Shell & Text Processing
────────────────────────────
├─ Variables
│   ├─ NAME="Linux"
│   └─ echo $NAME
│
├─ Redirection & Pipes
│   ├─ >, >>     # Redirect output
│   ├─ <         # Redirect input
│   └─ |         # Pipe commands
│
├─ Searching & Patterns
│   ├─ grep "pattern" file
│   ├─ find . -type f -name "*.java"
│   └─ wc -l file
────────────────────────────
Level 3: Scripting Basics
────────────────────────────
├─ Simple Script
│   ├─ #!/bin/bash
│   └─ echo "Hello World"
│
├─ Input & Variables
│   └─ read name; echo "Hello $name"
│
├─ Conditionals
│   └─ if [ -f "file.txt" ]; then ... fi
│
├─ Loops
│   ├─ for file in *.java; do echo $file; done
│   └─ while [ $count -le 5 ]; do ... done
────────────────────────────
Level 4: Advanced Shell
────────────────────────────
├─ Functions
│   └─ function greet() { echo "Hello $1"; }
├─ Command Substitution
│   └─ files=$(ls *.java)
├─ Arrays
│   └─ arr=(one two three); echo ${arr[1]}
├─ Automation & Scheduling
│   └─ Cron jobs: crontab -e
────────────────────────────
Level 5: Mastery & Productivity
────────────────────────────
├─ Text Processing Tools
│   ├─ awk, sed
│   ├─ cut, sort, uniq
│   └─ xargs
├─ Terminal Multiplexers
│   └─ tmux, screen
├─ Best Practices
│   ├─ Test scripts before running
│   ├─ Comment your scripts
│   └─ Modularize functions
├─ Challenges
│   ├─ Automate repetitive tasks
│   ├─ Parse logs, batch rename
│   └─ Build small CLI tools
────────────────────────────


Shell Scripts, chmod, Sessions, and source – Complete Guide
1. Shell Scripts (.sh)

Shell script = text file with shell commands.

Example: setvars.sh

export DB_PASS="admin123"
export IMAGE_NAME="postgres:15"


Can be executed in two ways:

Normal execution: ./setvars.sh

Sourcing: source ./setvars.sh or . ./setvars.sh

2. Shell Sessions

Current shell = the terminal you are typing in.

Child shell (subshell) = a new shell created to run a command or script.

2.1 Normal script execution (./script.sh)
./setvars.sh


Creates a child shell to run the script.

Variables exported in the script exist only in the child shell.

After the script finishes, the child shell terminates, variables are lost.

Example:

./setvars.sh
echo $DB_PASS   # Output: empty (lost)

2.2 Using source (source script.sh)
source ./setvars.sh
# or
. ./setvars.sh


Runs the script inside the current shell.

Variables persist in the current session.

No new shell is created → you can immediately use variables:

echo $DB_PASS   # Output: admin123
docker run -e $DB_PASS $IMAGE_NAME

3. File Permissions and chmod

Scripts must have execute permission to run normally (./script.sh).

3.1 Making a script executable
chmod +x setvars.sh


chmod = tool to change file permissions

+x = mode/argument telling chmod to add execute permission

setvars.sh = target file

Key: +x is not a flag; it’s a mode argument for chmod.

3.2 Without +x
./setvars.sh
# bash: ./setvars.sh: Permission denied


You cannot run the script as a program until execute permission is added.

Not needed for source ./setvars.sh, because sourcing does not execute a separate process.

4. Sessions and Variable Behavior
Method	New Shell?	Variables Persist?	Notes
./script.sh	✅ Yes (child)	❌ No	Executes in child shell, variables lost after script ends
source ./script.sh	❌ No (current shell)	✅ Yes	Variables remain in current shell, can be used immediately
5. Using source

Purpose: execute script inside current shell.

Preserves variables, functions, aliases.

Syntax:

source script.sh
# or
. script.sh


Commonly used to load environment variables for tools like Docker, Java, or custom scripts.

6. Summary – Workflow

Create a shell script:

nano setvars.sh
# Add:
export DB_PASS="admin123"
export IMAGE_NAME="postgres:15"


(Optional) Make executable for normal execution:

chmod +x setvars.sh


Load variables into current shell:

source ./setvars.sh


Use variables:

echo $DB_PASS
docker run -e $DB_PASS $IMAGE_NAME

7. Key Points

./script.sh → child shell, variables lost after script ends.

source script.sh → current shell, variables persist.

chmod +x → required to run script normally, not for sourcing.

+x in chmod is a mode, not a command-line flag.

This document fully covers:

.sh scripts execution

chmod usage for scripts

How shell sessions work (child vs current)

How source affects the shell and variable persistence




🔄 If you wanted to redirect data between files

That would use different operators:

> → redirect program output to a file (overwrite).

>> → redirect program output to a file (append).

< → redirect a file as input to a program.

Example:

cat input.txt > output.txt


Copies contents of input.txt into output.txt.
